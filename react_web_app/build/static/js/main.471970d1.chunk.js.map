{"version":3,"sources":["index.js"],"names":["range","start","stop","step","result","i","push","Square","props","className","onClick","style","background","value","ColourPicker","state","handleChange","color","setState","hex","this","onChange","onChangeComplete","handleChangeComplete","React","Component","Board","renderSquare","squares","renderRow","row","n_cols","indices","map","n_rows","row_indices","rr","renderRows","Game","handleColourChange","colour","change_n_rows","event","parseInt","target","change_n_cols","history","Array","fill","stepNumber","xIsNext","connect","console","log","require","clientId","on","slice","length","calculateWinner","concat","status","current","winner","moves","move","desc","jumpTo","handleClick","type","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.471970d1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { SketchPicker } from 'react-color';\nimport { Subscribe } from 'mqtt-react';\n\n\nfunction range(start, stop, step) {\n    if (typeof stop == 'undefined') {\n        // one param defined\n        stop = start;\n        start = 0;\n    }\n\n    if (typeof step == 'undefined') {\n        step = 1;\n    }\n\n    if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n        return [];\n    }\n\n    var result = [];\n    for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n};\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick} style={{background:props.value}} >\n    </button>\n  );\n}\n\nclass ColourPicker extends React.Component {\n  state = {\n    background: '#fff',\n  };\n\n  handleChange = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n\n\n  render() {\n    return (\n      <SketchPicker\n        color={this.state.background }\n        onChange={ this.handleChange }\n        onChangeComplete={ this.props.handleChangeComplete }\n      />\n    );\n  }\n\n}\n\nclass Board extends React.Component {\n\n  renderSquare = (i) => {\n    return (\n      <Square\n\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderRow = (row,n_cols) => {\n    var indices = range(row*n_cols, (row+1)*n_cols);\n\n    return (\n      <div className=\"board-row\">\n        {indices.map(this.renderSquare)}\n      </div>\n    )\n  }\n\n  renderRows(n_rows, n_cols){\n    var row_indices = range(0, n_rows);\n    let rr = this.renderRow;\n    return row_indices.map(\n      function(row) {return rr(row, n_cols)}\n    );\n\n  }\n\n  render() {\n\n    let n_rows = this.props.n_rows;\n    let n_cols = this.props.n_cols;\n    return (\n      this.renderRows(n_rows, n_cols)\n\n\n      /*\n      <div>\n        <div className=\"board-row\">\n          {this.renderRow(0,10)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderRow(0,10)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderRow(0,10)}\n        </div>\n      </div>\n      */\n    );\n  }\n}\n\n\n\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      n_rows: 6,\n      n_cols: 9,\n      colour: \"#fff\",\n      history: [{\n        squares: Array(16*16).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n    this.connect();\n    console.log(\"connected\");\n\n  }\n\n  handleColourChange = (colour) =>{\n    this.setState({\n      colour: colour.hex\n    });\n  }\n\n  connect() {\n\n    var mqtt    = require('mqtt');\n    var options = {\n        protocol: 'mqtts',\n        // clientId uniquely identifies client\n        // choose any string you wish\n        clientId: 'web_app'\n    };\n    var client  = mqtt.connect(\"mqtt://test.mosquitto.org\",{clientId:\"mqttjs01\"});\n    client.on(\"connect\",function(){\n\n    })\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.colour;\n\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n\n    //send i and colour to mqtt server\n\n  }\n\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step%2) == 0,\n    });\n  }\n\n  change_n_rows = (event) => {\n    this.setState({\n      n_rows: parseInt(event.target.value) ? parseInt(event.target.value) : 1\n      /*\n      history: [{\n        squares: Array(this.n_cols*parseInt(event.target.value)).fill(null),\n      }]\n      */\n    });\n  }\n\n  change_n_cols = (event) => {\n    this.setState({\n      n_cols: parseInt(event.target.value) ? parseInt(event.target.value) : 1\n      /*\n      history: [{\n        squares: Array(this.n_rows*event.target.value).fill(null),\n      }]\n      */\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n        return (\n          <li key={move}>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            n_rows={this.state.n_rows}\n            n_cols={this.state.n_cols}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div>\n          <ColourPicker\n            handleChangeComplete={this.handleColourChange}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        <div>\n          <div>\n            Number of rows:\n            <input\n              type=\"number\"\n              onChange={this.change_n_rows}\n              />\n          </div>\n          <div>\n            Number of cols:\n            <input\n              type=\"number\"\n              onChange={this.change_n_cols}\n              />\n          </div>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}